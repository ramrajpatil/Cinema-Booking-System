package com.user.filter;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.user.security.JWTService;
import com.user.services.UserServiceImpl;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component // Indicates this class is a Spring component
public class JWTFilter extends OncePerRequestFilter {

    @Autowired // Injects the JWTService bean for JWT token operations
    private JWTService jwtService;

    @Autowired // Injects the UserServiceImpl bean for user-related operations
    private UserServiceImpl userService;

    // Method to perform the filtering logic for each incoming request
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        // Extracts the Authorization header from the request
        String authHeader = request.getHeader("Authorization");
        
        // Initializes variables to store token and username
        String token = null;
        String username = null;
        
        // Checks if the Authorization header is present and starts with "Bearer"
        if (authHeader != null && authHeader.startsWith("Bearer")) {
            // Extracts the token from the Authorization header
            token = authHeader.substring(7);
            // Extracts the username from the token using JWTService
            username = jwtService.extractUsername(token);
        }
        
        // Checks if the username is not null and there is no authentication context already present
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            // Loads UserDetails from the database using UserServiceImpl
            UserDetails userDetails = userService.loadUserByUsername(username);
            
            // Validates the token against UserDetails using JWTService
            if (jwtService.validateToken(token, userDetails)) {
                // Creates an authentication token with UserDetails and sets it to the security context
                UsernamePasswordAuthenticationToken authToken = 
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }   
        }
        
        // Continues the filter chain for the request
        filterChain.doFilter(request, response);
    }
}
