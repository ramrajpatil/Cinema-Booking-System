package com.user.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.user.filter.JWTFilter;
import com.user.services.UserServiceImpl;

@Configuration
@EnableWebSecurity // Enables Spring Security's web security support
@EnableMethodSecurity // Enables Spring Security's method security support
public class SecurityConfig {

    @Autowired
    private JWTFilter filter; // Autowires the JWTFilter bean
    
    // Defines a bean for the custom user details service
    @Bean
    public UserDetailsService userDetailsService() {
        return new UserServiceImpl();
    }

    // Configures the security filter chain
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity.csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(authorizeRequests -> authorizeRequests
                                .requestMatchers("/auth/welcome", "/auth/addUser","/auth/login").permitAll() // Permit access to public URLs without authentication
                                .anyRequest().authenticated() // All other requests require authentication
                )
                .sessionManagement(session -> session
                                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // Use stateless session management
                )
                .authenticationProvider(authenticationProvider()) // Configure authentication provider
                .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class) // Add custom filter before UsernamePasswordAuthenticationFilter
                .build();
    }

    // Configures the authentication provider
    @Bean
    public AuthenticationProvider authenticationProvider() {
        // Return your implementation of AuthenticationProvider here
        // For example:
        // return new MyAuthenticationProvider();
        
        // Configures a DAO-based authentication provider with custom user details service and password encoder
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    // Configures the password encoder bean
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // Uses BCryptPasswordEncoder for password encoding
    }
    
    // Configures the authentication manager bean
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager(); // Retrieves the authentication manager from the AuthenticationConfiguration
    }
}
