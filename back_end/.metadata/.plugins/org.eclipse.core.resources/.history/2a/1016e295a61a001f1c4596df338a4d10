package com.user.security;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.user.pojos.User;

//Class for holding user information needed for security purposes
public class UserInfoDetails implements UserDetails {
 
 // Field to store the username
 private String userName;
 // Field to store the password
 private String password;
 // Field to store the authorities (roles) associated with the user
 private List<GrantedAuthority> authorities;
 
 // Constructor to initialize UserInfoDetails object with user information
 public UserInfoDetails(User user) {
     // Initialize username and password from user object
     userName = user.getName();
     password = user.getPassword();
     // Initialize authorities from user roles
     authorities = Arrays.stream(user.getRole().toString().split(","))
             .map(SimpleGrantedAuthority::new)
             .collect(Collectors.toList());
 }
 
 // Method to retrieve the authorities (roles) associated with the user
 @Override
 public Collection<? extends GrantedAuthority> getAuthorities() {
     return authorities;
 }

 // Method to retrieve the password associated with the user
 @Override
 public String getPassword() {
     return password;
 }

 // Method to retrieve the username associated with the user
 @Override
 public String getUsername() {
     return userName;
 }


    // Method to determine if the user's account is not expired
    @Override
    public boolean isAccountNonExpired() {
        return true; // Assuming no account expiration logic for this example
    }

    // Method to determine if the user's account is not locked
    @Override
    public boolean isAccountNonLocked() {
        return true; // Assuming no account locking logic for this example
    }

    // Method to determine if the user's credentials are not expired
    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Assuming no credential expiration logic for this example
    }

    // Method to determine if the user is enabled
    @Override
    public boolean isEnabled() {
        return true; // Assuming all users are enabled for this example
    }
	
	
}
