package com.user.security;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.user.pojos.User;

public class UserInfoDetails implements UserDetails {
	
	private String userName;
	private String password;
	
	private List<GrantedAuthority> authorities;
	
	
	public UserInfoDetails(User user) {
		userName=user.getName();
		password=user.getPassword();
		authorities=Arrays.stream(user.getRole().toString().split(","))
				.map(SimpleGrantedAuthority::new)
				.collect(Collectors.toList());
	}
	
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return authorities;
	}

	@Override
	public String getPassword() {
		return userName;
	}

	@Override
	public String getUsername() {
		return password;
	}


    // Method to determine if the user's account is not expired
    @Override
    public boolean isAccountNonExpired() {
        return true; // Assuming no account expiration logic for this example
    }

    // Method to determine if the user's account is not locked
    @Override
    public boolean isAccountNonLocked() {
        return true; // Assuming no account locking logic for this example
    }

    // Method to determine if the user's credentials are not expired
    @Override
    public boolean isCredentialsNonExpired() {
        return true; // Assuming no credential expiration logic for this example
    }

    // Method to determine if the user is enabled
    @Override
    public boolean isEnabled() {
        return true; // Assuming all users are enabled for this example
    }
	
	
}
